@inject IPageService _pageService
@inject NavigationManager _navigationManager

<MudAppBar Elevation="0">
    <MudHidden Breakpoint="Breakpoint.SmAndUp">
        <MudIconButton OnClick="ToggleDrawer" Icon="@Icons.Rounded.Notes" Color="Color.Inherit" Edge="Edge.Start" />
        <MudSpacer/>
        <NavLink ActiveClass="d-flex" href="/">
            <MudAvatar Image="https://avatars.githubusercontent.com/u/69018178" Alt="GermandF's github avatar" />
        </NavLink>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Rounded.Search" Color="Color.Inherit" Edge="Edge.End" OnClick="OpenSearchDialog" />
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
        <NavLink ActiveClass="d-flex me-4" href="/">
            <MudAvatar Image="https://avatars.githubusercontent.com/u/69018178" Alt="GermandF's github avatar" />
        </NavLink>
        <MudButton Href="games" Color="Color.Inherit" Variant="Variant.Text">Games</MudButton>
        <MudButton Href="blog" Color="Color.Inherit" Variant="Variant.Text">Blog</MudButton>
        <MudButton Href="tools" Color="Color.Inherit" Variant="Variant.Text">Tools</MudButton>
        <MudButton Href="about" Color="Color.Inherit" Variant="Variant.Text">About</MudButton>
        <MudSpacer/>
        <div class="navmenu-autocomplete">
            <MudAutocomplete T="PageDto" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                             SearchFunc="@SearchPages" ValueChanged="OnSearchResult" Dense="true" Class="ma-0"
                            Style="@($"color:{Colors.Grey.Lighten5};")">
                <ItemTemplate>
                    <MudText>@context.Title</MudText>
                    <MudText Typo="Typo.body2">@context.Description</MudText>
                </ItemTemplate>
            </MudAutocomplete>
        </div>
    </MudHidden>
</MudAppBar>
<MudDrawer Open="@_drawerOpen" OpenChanged="OnDrawerOpenChanged" Breakpoint="Breakpoint.SmAndUp" Style="z-index: 10000;">
    <MudHidden Breakpoint="Breakpoint.SmAndUp">
        <MudToolBar Dense="true" DisableGutters="true">
            <MudIconButton Icon="@Icons.Rounded.Close" Color="Color.Inherit" OnClick="ToggleDrawer" />
        </MudToolBar>
        <MudNavMenu Color="Color.Primary" Margin="Margin.Dense" Rounded="true" Class="pa-2">
            <MudNavLink Href="blog">Blog</MudNavLink>
            <MudNavLink Href="tools">Tools</MudNavLink>
            <MudNavLink Href="about">About</MudNavLink>
        </MudNavMenu>
    </MudHidden>
</MudDrawer>

<MudDialog @bind-IsVisible="_searchDialogOpen" Options="_dialogOptions">
    <DialogContent>
        <MudAutocomplete T="PageDto" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                         SearchFunc="@SearchPages" ValueChanged="OnSearchResult">
            <ItemTemplate>
                <MudText>@context.Title</MudText>
                <MudText Typo="Typo.body2">@context.Description</MudText>
            </ItemTemplate>
        </MudAutocomplete>
        <div class="d-flex justify-center align-center mud-height-full pb-8">
            <MudText Typo="Typo.body2" Class="mud-text-secondary mt-4">Nothing found, do a search</MudText>
        </div>
    </DialogContent>
</MudDialog>

@code {

    private bool _searchDialogOpen;
    private DialogOptions _dialogOptions = new() { Position = DialogPosition.TopCenter, NoHeader = true };
    private bool _drawerOpen = true;
    private List<PageDto> _pages = new();

    private void OpenSearchDialog() => _searchDialogOpen = true;

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    private void OnDrawerOpenChanged(bool value) => _drawerOpen = value;

    private void OnSearchResult(PageDto pageDto) => _navigationManager.NavigateTo(pageDto.Url);

    protected override void OnInitialized() => _pages = _pageService.GetPages();

    private async Task<IEnumerable<PageDto>> SearchPages(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return _pages.Where(x => x.IsFeatured);

        return _pages.Where(x => x.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}
